/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * The payment method associated with the transaction. Some enum value clarifications:
 *
 * @remarks
 *   - `cash` - this type will mainly appear on self-hosted platforms like WooCommerce where Cash on Delivery is available.
 *   - `card` - includes credit or debit card payments
 */
export enum OrderTransactionPaymentMethodType {
    Cash = "cash",
    Card = "card",
    Other = "other",
}

/**
 * The status of the transaction.
 */
export enum OrderTransactionStatus {
    Success = "success",
    Failure = "failure",
    Pending = "pending",
    Cancelled = "cancelled",
    Refunded = "refunded",
    Other = "other",
}

/**
 * The transaction type associated with the transaction. Some enum value clarifications:
 *
 * @remarks
 *   - `void` - means a cancellation of a pending transaction.
 *   - `payout` - means the merchant transferred the money held in the platform to the merchant's own bank account.
 *   - `other` - If the transaction can't fit into any of the above types. This happens more often on self-hosted platforms where merchants create their own transaction types / have them in a different language.
 */
export enum OrderTransactionType {
    Sale = "sale",
    Refund = "refund",
    Void = "void",
    Payout = "payout",
    Fee = "fee",
    Other = "other",
}

export class OrderTransaction extends SpeakeasyBase {
    /**
     * The amount associated with the transaction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "amount" })
    amount: number;

    /**
     * The [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) timestamp that the transaction was created.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    createdAt: string;

    /**
     * The description of the transaction
     */
    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description?: string;

    /**
     * The fee associated with the transaction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "fee" })
    fee?: number;

    /**
     * The gateway associated with the transaction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "gateway" })
    gateway: string;

    /**
     * The gateway data associated with the transaction. An object containing additional metadata. This field is only populated for commerce platforms like Shopify that do their own payment processing & partner with another processor (Stripe), which attaches metadata to the transaction. Otherwise the value is `null`. The properties depend on the payment gateway used.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "gateway_data" })
    gatewayData?: any;

    /**
     * The Rutter generated unique ID of the transaction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    /**
     * The [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) currency code of the transaction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "iso_currency_code" })
    isoCurrencyCode: string;

    /**
     * The Rutter ID of the [Order](/rest/version/orders) linked to the transaction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "order_id" })
    orderId: string;

    /**
     * The payment method associated with the transaction. Some enum value clarifications:
     *
     * @remarks
     *   - `cash` - this type will mainly appear on self-hosted platforms like WooCommerce where Cash on Delivery is available.
     *   - `card` - includes credit or debit card payments
     */
    @SpeakeasyMetadata()
    @Expose({ name: "payment_method_type" })
    paymentMethodType: OrderTransactionPaymentMethodType;

    /**
     * The platform specific ID of the customer linked to the transaction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "platform_customer_id" })
    platformCustomerId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "platform_data" })
    platformData?: Record<string, any>;

    /**
     * The platform specific ID of the transaction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "platform_id" })
    platformId?: string;

    /**
     * The platform type associated with the transaction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "platform_type" })
    platformType?: string;

    /**
     * The status of the transaction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status: OrderTransactionStatus;

    /**
     * The transaction type associated with the transaction. Some enum value clarifications:
     *
     * @remarks
     *   - `void` - means a cancellation of a pending transaction.
     *   - `payout` - means the merchant transferred the money held in the platform to the merchant's own bank account.
     *   - `other` - If the transaction can't fit into any of the above types. This happens more often on self-hosted platforms where merchants create their own transaction types / have them in a different language.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type: OrderTransactionType;

    /**
     * The [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) timestamp that the transaction was last updated.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "updated_at" })
    updatedAt: string;
}
