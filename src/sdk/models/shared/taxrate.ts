/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class TaxRateComponents extends SpeakeasyBase {
    /**
     * Whether this component should compound the total or not
     */
    @SpeakeasyMetadata()
    @Expose({ name: "is_compound" })
    isCompound: boolean;

    /**
     * Whether this component is assosciated with purchases tax
     */
    @SpeakeasyMetadata()
    @Expose({ name: "is_purchases_tax" })
    isPurchasesTax: boolean;

    /**
     * Whether this component is assosciated with sales tax
     */
    @SpeakeasyMetadata()
    @Expose({ name: "is_sales_tax" })
    isSalesTax: boolean;

    /**
     * Name of the sub tax this component represents
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    /**
     * Tax rate of the component or sub tax
     */
    @SpeakeasyMetadata()
    @Expose({ name: "rate" })
    rate: number;
}

export class TaxRateSubsidiaries extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;
}

export class TaxRate extends SpeakeasyBase {
    /**
     * The tax code of the tax rate.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "code" })
    code: string;

    /**
     * Tax rates can break into multiple sub taxes that are then combined in various ways.  These sub taxes are called components.
     */
    @SpeakeasyMetadata({ elemType: TaxRateComponents })
    @Expose({ name: "components" })
    @Type(() => TaxRateComponents)
    components: TaxRateComponents[];

    /**
     * Where there are multiple components of a tax, each component may be calculated on the original amount and added together. Alternatively, one tax may be calculated on the sub-total of the original amount plus another tax, which is referred to as compounding. When there is compounding, the effective tax rate is the rate that, if applied to the original amount, would result in the total amount of tax with compounding.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "effective_tax_rate" })
    effectiveTaxRate: number;

    /**
     * The Rutter generated unique ID of the tax rate.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    /**
     * The name of the tax rate.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    /**
     * The raw platform data corresponding to the Rutter object.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "platform_data" })
    platformData?: Record<string, any>;

    /**
     * The platform specific ID of the tax rate.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "platform_id" })
    platformId: string;

    /**
     * An array of [Subsidiaries](/rest/version/subsidiaries) linked to the tax rate. This feature is currently only supported on NetSuite.
     */
    @SpeakeasyMetadata({ elemType: TaxRateSubsidiaries })
    @Expose({ name: "subsidiaries" })
    @Type(() => TaxRateSubsidiaries)
    subsidiaries?: TaxRateSubsidiaries[];

    /**
     * The total tax rate
     */
    @SpeakeasyMetadata()
    @Expose({ name: "total_tax_rate" })
    totalTaxRate: number;
}
